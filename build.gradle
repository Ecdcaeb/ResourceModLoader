apply from: 'gradle/scripts/helpers.gradle'

assertProperty 'root_package'
assertProperty 'mod_id'
assertProperty 'mod_name'
assertProperty 'mod_version'

assertSubProperties 'use_access_transformer', 'access_transformer_locations'
assertSubProperties 'is_coremod', 'coremod_includes_mod', 'coremod_plugin_class_name'
assertSubProperties 'use_asset_mover', 'asset_mover_version'

setDefaultProperty 'mapping_channel', true, 'stable'
setDefaultProperty 'mapping_version', true, '39'

buildscript {
    repositories {
        if (project.use_mirror == 'true') {
            // clear all proxy settings, this is available for global
            System.clearProperty "http.proxyHost"
            System.clearProperty "http.proxyPort"
            System.clearProperty "https.proxyHost"
            System.clearProperty "https.proxyPort"
            System.clearProperty "socksProxyHost"
            System.clearProperty "socksProxyPort"
            System.setProperty "java.net.useSystemProxies", "false"

            maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
            maven { url "https://${mirror_maven_url}" }
        }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.outlands.top/releases' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.10.+', changing: true
        classpath "net.minecraftforge:gradlejarsigner:1.0.5"
        classpath "org.spongepowered:mixingradle:0.7.+"
    }
}

//if (propertyBool('use_mirror')) apply from: "gradle/scripts/mirror.gradle"

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'net.minecraftforge.gradlejarsigner'

version = project.mod_version
group = project.root_package
archivesBaseName = project.mod_name



java.toolchain.languageVersion = JavaLanguageVersion.of(propertyInteger('java_version'))
jarSigner.autoDetect(archivesBaseName)

minecraft {

    legacy {
        fixClasspath = true
        extractMappings = true
        attachMappings = true
    }

    mappings channel: project.mapping_channel, version: project.mapping_version

    copyIdeResources = true;

    if(propertyBool('use_access_transformer')){
        accessTransformer = file('src/main/resources/META-INF/${project.access_transformer_locations}')
    }

    //makeObfSourceJar = true // an Srg named sources jar is made by default. uncomment this to disable.

    runs {
        // applies to all the run configs below
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            //property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            //property 'forge.logging.console.level', 'debug'
        }

        client {
            workingDirectory project.file('run/client')
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            //property 'forge.enabledGameTestNamespaces', version.mod_id
            args    '--rml.debug', 'true',
                    '--rml.test', 'true',
                    '--rml.dev.location', '.../.../dev/example/'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            //property 'forge.enabledGameTestNamespaces', version.mod_id
            args    '--rml.debug', 'true',
                    '--rml.test', 'true',
                    '--rml.dev.location', '.../.../dev/example/'


            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }
    maven {
        url "https://repo.maven.apache.org/maven2/"
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
    }
    maven {
        name 'GTNH Maven'
        url 'https://nexus.gtnewhorizons.com/repository/public/'
    }
    maven {
        name 'GTCEu Maven'
        url 'https://maven.gtceu.com'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "com.cleanroommc:cleanroom:${project.cleanroom_version}"


    compileOnly 'com.cleanroommc:groovyscript:1.1.3'
    implementation 'curse.maven:just-enough-dimensions-254317:2932048'
    implementation 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.698'
    implementation fg.deobf('blank:dev.latvian.kubejs-1.12.2:1.1.0.63')

    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html


    // Mixin and it's common libraries
    // annotationProcessor 'org.ow2.asm:asm:9.6'
    // annotationProcessor 'com.google.guava:guava:33.0.0-jre'
    // annotationProcessor 'com.google.code.gson:gson:2.10.1'

    // annotationProcessor ('com.cleanroommc:sponge-mixin:0.17.6+mixin.0.8.5')
    // //implementation 'com.cleanroommc:sponge-mixin:0.17.6+mixin.0.8.5'
    // annotationProcessor ("io.github.llamalad7:mixinextras-common:0.3.5")
    // //implementation "io.github.llamalad7:mixinextras-common:0.3.5"

    if (propertyBool('use_asset_mover')) {
        implementation "com.cleanroommc:assetmover:${project.asset_mover_version}"
    }

    if (propertyBool('enable_junit_testing')) {
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    def filterList = ['mcmod.info', 'pack.mcmeta']
    filterList.addAll(propertyStringList('mixin_configs').collect(config -> "mixins.${config}.json" as String))

    var replaceProperties = [
            mod_id: propertyString('mod_id'),
            mod_name: propertyString('mod_name'),
            mod_version: propertyString('mod_version'),
            mod_description: propertyString('mod_description'),
            mod_authors: "[${propertyStringList('mod_authors', ',').join(', ')}]",
            mod_credits: propertyString('mod_credits'),
            mod_url: propertyString('mod_url'),
            mod_update_json: propertyString('mod_update_json'),
            mod_logo_path: propertyString('mod_logo_path'),
            mixin_refmap: propertyString('mixin_refmap'),
            mixin_package: propertyString('mixin_package'),
            java_version: propertyString('java_version')
    ]
    inputs.properties replaceProperties

    filesMatching(filterList) {
        expand replaceProperties + [project: project]
    }

    if (propertyBool('use_access_transformer')) {
        rename '(.+_at.cfg)', 'META-INF/$1'
    }
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        def attribute_map = [:]
        attribute_map['Specification-Version'] = '1' // We are version 1 of ourselves
        attribute_map['Specification-Vendor'] = "[${propertyStringList('mod_authors', ',').join(', ')}]"
        attribute_map['ModType'] = 'CRL'
        attribute_map['Implementation-Title'] = project.name
        attribute_map['Implementation-Version'] = project.mod_version
        attribute_map['Implementation-Vendor'] = "[${propertyStringList('mod_authors', ',').join(', ')}]"
        attribute_map['Implementation-Timestamp'] = new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        if(propertyBool('is_coremod')){
            attribute_map['FMLCorePlugin'] = propertyString('coremod_plugin_class_name')
            if (propertyBool('coremod_includes_mod')) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = true
            }
        }
        if((!propertyBool('is_coremod')) || propertyBool('coremod_includes_mod')){
            attribute_map['Specification-Title'] = project.mod_id
        }
        if(propertyBool('use_access_transformer')){
            attribute_map['FMLAT']= project.access_transformer_locations
        }
        if(propertyBool('use_mixin')){
            StringBuilder mixins = new StringBuilder();
            for(String s : propertyStringList('mixin_configs').collect(config -> "mixins.${config}.json" as String)){
                mixins.append(s).append(',');
            }
            mixins.deleteCharAt(mixins.length());
            attribute_map['MixinConfigs'] = mixins.toString();
        }

        attributes(attribute_map)
    }
    jarSigner.sign(it)
}

jar.finalizedBy('reobfJar')
// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


eclipse {
    // Run everytime eclipse builds the code
    //autoBuildTasks genEclipseRuns
    // Run when importing the project
    synchronizationTasks 'genEclipseRuns'
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

mixin {
    add sourceSets.main, project.mixin_refmap
}

tasks.register('releaseExample', Zip) {
    archiveBaseName = "example-"+version+".zip"
    destinationDirectory = file("releases/example")

    from "dev/example"
}

