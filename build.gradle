buildscript {
    repositories {
<<<<<<< Updated upstream
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
=======
        if (use_mirror_url == "true") {
            // clear all proxy settings, this is available for global
            System.clearProperty "http.proxyHost"
            System.clearProperty "http.proxyPort"
            System.clearProperty "https.proxyHost"
            System.clearProperty "https.proxyPort"
            System.clearProperty "socksProxyHost"
            System.clearProperty "socksProxyPort"
            System.setProperty "java.net.useSystemProxies", "false"

            maven { url "https://maven.aliyun.com/nexus/content/groups/public" }
            maven { url "https://${mirror_maven_url}" }
        } else {
            mavenCentral()
            maven { url "https://maven.minecraftforge.net" }
        }
>>>>>>> Stashed changes
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
<<<<<<< Updated upstream
=======

boolean useMirror = use_mirror_url == "true"
if (useMirror) apply from: "mirror.gradle"
apply plugin: "net.minecraftforge.gradle.forge"
apply from: "runmanager.gradle"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = "1.0"
group = "com.ideallandframework.modid" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modid"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    mappings = "snapshot_20171003"
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

>>>>>>> Stashed changes
repositories {
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
    }
    maven {
        name 'GTNH Maven'
        url 'https://nexus.gtnewhorizons.com/repository/public/'
    }
    maven {
        name 'GTCEu Maven'
        url 'https://maven.gtceu.com'
    }

    mavenCentral()
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = 'mods.Hileb.rml' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ResourceModLoader'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/rml_at.cfg')




    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //launch the IFMLLoadingPlugin
            property 'fml.coreMods.load', 'mods.Hileb.rml.core.RMLFMLLoadingPlugin,com.cleanroommc.groovyscript.core.GroovyScriptCore'

            property 'rml.debug', 'true'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //launch the IFMLLoadingPlugin
            property 'fml.coreMods.load', 'mods.Hileb.rml.core.RMLFMLLoadingPlugin,com.cleanroommc.groovyscript.core.GroovyScriptCore'

            property 'rml.debug', 'true'
        }
    }
}

dependencies {
<<<<<<< Updated upstream
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    compile 'com.cleanroommc:groovyscript:0.8.0'
    compile 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.698'
    deobf files('libs/KubeJS-forge-1.12.2-1.1.0.63.jar')

=======
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile "com.mod-buildcraft:buildcraft:6.0.8:dev"  // adds buildcraft to the dev env
    //compile "com.googlecode.efficient-java-matrix-library:ejml:0.24" // adds ejml to the dev env

    // the "provided" configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // the deobf configurations:  "deobfCompile" and "deobfProvided" are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile "com.mod-buildcraft:buildcraft:6.0.8:dev"
    //deobfProvided "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html



    compile 'com.cleanroommc:groovyscript:0.8.0'
    compile 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.698'
    compile files('libs/KubeJS-forge-1.12.2-1.1.0.63.jar')

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
>>>>>>> Stashed changes
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes([
                'Specification-Title': "rml",
                'Specification-Vendor': "Hileb",
                'Specification-Version': '1', // We are version 1 of ourselves
                'FMLCorePlugin': 'mods.Hileb.rml.core.RMLFMLLoadingPlugin',
                'FMLAT': 'rml_at.cfg',
                'Implementation-Title': "ResourceModLoader",
                'Implementation-Version': mod_version,
                'Implementation-Vendor': "Hileb",
                'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

<<<<<<< Updated upstream
// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

=======
>>>>>>> Stashed changes

tasks.register('buildExample', Zip) {
    archiveBaseName = "example.zip"
    destinationDirectory = file("run/mods")

    from "dev/example"
}
tasks.register('releaseExample', Zip) {
    archiveBaseName = "example-"+version+".zip"
    destinationDirectory = file("releases/example")

    from "dev/example"
}

