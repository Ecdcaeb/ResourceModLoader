buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
repositories {
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
    }
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Blamejared Maven'
        url 'https://maven.blamejared.com/'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0.9'
group = 'mods.Hileb.rml' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ResourceModLoader'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    accessTransformer = file('src/main/resources/META-INF/rml_at.cfg')




    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //launch the IFMLLoadingPlugin
            property 'fml.coreMods.loa', 'mods.Hileb.rml.core.RMLFMLLoadingPlugin'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            //launch the IFMLLoadingPlugin
            property 'fml.coreMods.loa', 'mods.Hileb.rml.core.RMLFMLLoadingPlugin'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    //deobf 'curse.maven:groovyscript-687577:5120928'
    compile 'zone.rong:mixinbooter:8.8'
    compile 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.698'
    deobf files('libs/KubeJS-forge-1.12.2-1.1.0.63.jar')


}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "FMLCorePlugin": "mods.Hileb.rml.core.RMLFMLLoadingPlugin",
                "FMLAT": "rml_at.cfg",
                "Specification-Title": "rml",
                "Specification-Vendor": "Resource Mod Loader",
                "Specification-Version": project.version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"Resource Mod Loader",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


tasks.register('buildExample', Zip) {
    archiveName = "example.zip"
    destinationDir = file("run/mods")

    from "dev/example"
}
tasks.register('releaseExample', Zip) {
    archiveName = "example-"+version+".zip"
    destinationDir = file("releases/example")

    from "dev/example"
}
